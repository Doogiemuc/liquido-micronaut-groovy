package org.doogie.teams

import groovy.json.JsonBuilder
import groovy.util.logging.Slf4j
import io.micronaut.http.HttpResponse
import io.micronaut.http.annotation.*
import io.micronaut.http.server.exceptions.HttpServerException
import io.micronaut.security.annotation.Secured
import io.micronaut.security.authentication.Authentication
import io.micronaut.security.rules.SecurityRule
import io.micronaut.security.token.jwt.generator.JwtTokenGenerator
import io.micronaut.validation.Validated
import org.doogie.security.LiquidoTokenValidator
import org.springframework.context.annotation.Profile

import javax.inject.Inject
import javax.validation.Valid

@Validated
@Controller
@Slf4j
class TeamController {

	@Get("/")
	@Secured(SecurityRule.IS_ANONYMOUS)
	index() {
		return '''{ 
			"msg": "LIQUIDO Mobile REST API",
			"version": "0.1.0",
			"status": "ok"
		}'''
	}

	@Inject
	JwtTokenGenerator tokenGenerator

	@Get("/devLogin")
	@Secured(SecurityRule.IS_ANONYMOUS)
	@Profile("test")
	HttpResponse devLogin(@QueryValue String email, @QueryValue String teamName) {
		String token = tokenGenerator.generateToken("sub": email, "teamName": teamName).orElseThrow(() -> new HttpServerException("cannot generate JWT in devLogin"))
		return HttpResponse.ok([jwt: token])
	}


	/**
	 * Create a new team.
	 * The response contains a JSON Web Token (JWT) which has the userEmail as 'sub' claim and also the teamName in a claim.
	 * @param req a CreateTeamRequest
	 * @return Info about the new team and the JWT for future requests
	 */
	@Post("/team")
	@Secured(SecurityRule.IS_ANONYMOUS)
	HttpResponse createTeam(@Body @Valid CreateTeamRequest req) {
		Team newTeam = new Team(req.teamName, req.adminName, req.adminEmail)
		newTeam.save(flush: true)

		log.info("New team created: "+newTeam.name)

		// Generate a signed JWT and return it with the team in the response. A JWT MUST contain a "sub" claim!
		Optional tokenOpt = tokenGenerator.generateToken("sub": req.adminEmail, "teamName": newTeam.name, "roles": ["ROLE_FROM_CUSTOM_JWT"])

		def builder = new JsonBuilder()
		def result = builder {
			msg "New team created successfully"
			team(name: newTeam.name, inviteCode: newTeam.inviteCode)
			jwt tokenOpt.get()
		}
		return HttpResponse.ok(result)
	}

	@Put("/joinTeam")
	@Secured(SecurityRule.IS_ANONYMOUS)
	HttpResponse joinTeam(@Body @Valid JoinTeamRequest req) {
		Team team = Team.findByInviteCode(req.inviteCode)            // GORM I LIKE :-)
		if (!team) return HttpResponse.badRequest('{"err":"Cannot find a team with this inviteCode!"}')
		team.members.push(new User(req.userName, req.userEmail))
		team.save(flush: true)

		String token = tokenGenerator.generateToken("sub": req.userEmail, "teamName": team.name).orElseThrow(() -> new HttpServerException("cannot generate JWT"))
		return HttpResponse.ok([msg: "Joined team", team: [ name: team.name], jwt: token])
	}

	//TODO: @Post("/login")  with email and OTT in req.body also for normal users


	@Get("/team")
	//@Secured(SecurityRule.IS_AUTHENTICATED)		// MUST pass a valid JWT with teamName in "sub" claim
	@Secured([LiquidoTokenValidator.LIQUIDO_ROLE_USER])							// AND user must have this role
	HttpResponse getTeam(Authentication authentication) {
		String userEmail = authentication.getName()
		String teamName = authentication.getAttributes().get(LiquidoTokenValidator.TEAM_NAME_CLAIM)
		if (!teamName) return HttpResponse.unauthorized().body('{"err":"Not authenticated with valid teamName!", "teamName":"'+teamName+'"}')

		Team team = Team.findByName(teamName)											// this finder method is automatically generated by GORM
		if (!team) return HttpResponse.notFound('{"err": "Team '+teamName+' found."')
		if (!team.members.stream().anyMatch(user -> user.email == userEmail)) {
			return HttpResponse.unauthorized().body('{"err":"User is not a member of team!", "userEmail": "'+userEmail+'","teamName":"'+teamName+'"}')
		}

		return HttpResponse.ok(team)
	}


}
